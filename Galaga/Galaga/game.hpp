//
//  game.hpp
//  Galaga
//
//  Created by Elijah Harrison on 12/20/21.
//

#ifndef game_hpp
#define game_hpp

#include <vector>

#include "vector.hpp"
#include "uiInteract.hpp"
#include "uiDraw.hpp"

// game objects
#include "ship.hpp"
#include "laser.hpp" // technically unused, Laser objects generated by Ship class
#include "enemy.hpp"

// ui game objects
#include "uiGameObjects.hpp"

class Game {

private:
    // screen positioning
    
    // game objects
    Ship ship;
    std::vector<Laser> lasers;
    std::vector<Enemy> enemies;
    
    // ui game objects
    Level level;
    Score score;
    
    // screen position objs
    Vec2 topLeft;
    Vec2 bottomRight;
    
    // other
    int laserTimer;
    
    // methods
    void populateEnemies();
    
public:
    
    Game(Vec2 topLeft, Vec2 bottomRight, int fps) {
        
        // set ui stuff
        level.setPosition(topLeft, bottomRight);
        score.setPosition(topLeft, bottomRight);
        
        // screen position objs
        this->topLeft     = topLeft;
        this->bottomRight = bottomRight;
        
        // send screen info to gameobjects
        Gameobject::setScreenVars(topLeft, bottomRight);
        Gameobject::setFPS(fps);
        
        // reset gameobjects now that Gameobject has screen info
        ship.resetPosition();
        
        // other
        laserTimer = 0; // frames
        
        // populate enemies
        populateEnemies();
    }
    
    Game() { }
    ~Game() { }
    
    void update() {
        
        // update gameobjects
        ship.update();
        //Â update lasers
        for (std::vector<Laser>::iterator it = lasers.begin();  it < lasers.end();  ++it) it->update();
        for (std::vector<Enemy>::iterator it = enemies.begin(); it < enemies.end(); ++it) it->update();
        
        // laser timer
        
        // other update methods called here
        
        // other "handle" methods called here
        handleCollisions();
        cleanAllZombies();
    }
    
    void handleInput(const Interface & ui) {
        
        // game state
        if (ui.getHeldKey(ESC)) {
            std::cout << "ESC: exit(0);\n";
            exit(0); // ESC = quit
        }
        
        // handle gameobjects
        ship.handleInput(ui);
        
        // fire laser on SPACE down
        // also, implement laser 'timer'
        if (ui.getHeldKey(SPACE) && laserTimer > 0) laserTimer = 2; //workaround for only on button press
        if (laserTimer > 0) laserTimer--;
        if (ui.getHeldKey(SPACE) && laserTimer <= 0) {
            lasers.push_back(ship.fireLaser());
            laserTimer = 2;
        }
            
    }
    
    void display(const Interface & ui) {
        
        // display gameobjects
        ship.display(ui);
        
        for (std::vector<Laser>::iterator it = lasers.begin();  it < lasers.end();  ++it) it->display(ui);
        for (std::vector<Enemy>::iterator it = enemies.begin(); it < enemies.end(); ++it) it->display(ui);
        
        // display ui stuff
        level.display();
        score.display();
    }
    
    bool collided(Gameobject & obj1, Gameobject & obj2) {
        float x1 = obj1.getPosition().getX();
        float x2 = obj2.getPosition().getX();
        
        float y1 = obj1.getPosition().getY();
        float y2 = obj2.getPosition().getY();
        
        float r1 = obj1.getRadius();
        float r2 = obj2.getRadius();
        
        float dist = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));
        
        return dist < (r1 + r2);
    }
    
    void handleCollisions() {
        
        for (std::vector<Laser>::iterator lit = lasers.begin(); lit < lasers.end(); ++lit) {
            
            // laser and enemy ships
            for (std::vector<Enemy>::iterator eit = enemies.begin(); eit < enemies.end(); ++eit) {
                
                if (collided((*lit), (*eit))) {
                    
                    lit->setAlive(false);
                    eit->setAlive(false);
                    
                    break;

                }
                
            }
            
        }
        
        // spaceships and player ship
        
        // spaceships' lasers and player ship
    }
    
    void cleanAllZombies() {
        cleanAllLaserZombies();
        cleanAllEnemyZombies();
    }
    
    void cleanAllLaserZombies() {
        std::vector<Laser>::iterator it = lasers.begin();
        while (it < lasers.end()) {
            if (!it->isAlive()) {
                std::cout << "removing dead " << it->getName() << std::endl;
                it = lasers.erase(it);
            }
            ++it;
        }
    }
    
    void cleanAllEnemyZombies() {
        std::vector<Enemy>::iterator it = enemies.begin();
        while (it < enemies.end()) {
            if (!it->isAlive()) {
                std::cout << "removing dead " << it->getName() << std::endl;
                it = enemies.erase(it);
            }
            ++it;
        }
    }

};

#endif /* game_hpp */
